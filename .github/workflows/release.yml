name: Test, and deploy

on:
  workflow_dispatch:
    inputs:
      title:
        type: string
        description: Release title
        required: false
      upstreamCommit:
        type: string
        description: Upstream commit
        required: false
      deployIdentity:
        type: boolean
        description: Deploy identity
        required: true
        default: false
      deployDashboard:
        type: boolean
        description: Deploy dashboard
        required: true
        default: false
      deployExample:
        type: boolean
        description: Deploy example
        required: true
        default: false
      deployHydraPublic:
        type: boolean
        description: Deploy hydra public
        required: true
        default: false
      deployHydraAdmin:
        type: boolean
        description: Deploy hydra admin
        required: true
        default: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PROJECT_ID: ${{ fromJSON('{"main":"unstoppable-domains","staging":"unstoppable-domains-staging"}')[github.head_ref || github.ref_name] }}
  NEXT_PUBLIC_APP_ENV: ${{ fromJSON('{"main":"production","staging":"staging"}')[github.head_ref || github.ref_name] }}

jobs:
  release_metadata:
    name: Generate Release Metadata
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      commit: ${{ steps.upstream-commit.outputs.commit || github.sha }}
      isProduction: ${{ github.ref_name == 'main' }}
      tag: ${{ steps.bump-semver.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # TODO Find a reasonable default
          fetch-depth: 0

      - if: github.event.inputs.upstreamCommit
        name: Validate Upstream Commit
        id: upstream-commit
        run: |-
          git merge-base --is-ancestor ${{ github.event.inputs.upstreamCommit }} HEAD
          echo ::set-output name=commit::$(git rev-parse ${{ github.event.inputs.upstreamCommit }})

      - name: Configure Git User
        run: |-
          git config user.email ${{ github.actor }}@users.noreply.github.com
          git config user.name ${{ github.actor }}

      - name: Get Latest Tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        with:
          semver_only: true

      - name: Bump Version
        uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: ${{ github.ref_name == 'main' && 'major' || 'prerelease' }}

      # TODO Make a full release
      - name: Push Tag
        run: |-
          git tag -a "${{ steps.bump-semver.outputs.new_version }}" -m "${{ github.event.inputs.title }}"
          git push origin "${{ steps.bump-semver.outputs.new_version }}"

      - id: changelog
        name: "Generate Changelog"
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sinceTag: ${{ steps.get-latest-tag.outputs.tag }}
          dueTag: ${{ steps.bump-semver.outputs.new_version }}
          maxIssues: 50

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.bump-semver.outputs.new_version }}
          release_name: ${{ github.event.inputs.title }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ github.ref_name == 'main' }}
