name: Test, and deploy

on:
  workflow_dispatch:
    inputs:
      title:
        type: string
        description: Release title
        required: false
      upstreamCommit:
        type: string
        description: Upstream commit
        required: false
      deployIdentity:
        type: boolean
        description: Deploy identity
        required: true
        default: false
      deployDashboard:
        type: boolean
        description: Deploy dashboard
        required: true
        default: false
      deployExample:
        type: boolean
        description: Deploy example
        required: true
        default: false
      deployHydraPublic:
        type: boolean
        description: Deploy hydra public
        required: true
        default: false
      deployHydraAdmin:
        type: boolean
        description: Deploy hydra admin
        required: true
        default: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PROJECT_ID: ${{ fromJSON('{"main":"unstoppable-domains","staging":"unstoppable-domains-staging"}')[github.head_ref || github.ref_name] }}
  NEXT_PUBLIC_APP_ENV: ${{ fromJSON('{"main":"production","staging":"staging"}')[github.head_ref || github.ref_name] }}

jobs:
  release_metadata:
    name: Generate Release Metadata
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      commit: ${{ steps.ancestor.outputs.commit || github.sha }}
      isProduction: ${{ github.ref_name == 'main' }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          # TODO Find a reasonable default
          fetch-depth: 0

      - run: git config user.email ${{ github.actor }}@users.noreply.github.com
      - run: git config user.name ${{ github.actor }}

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        with:
          semver_only: true

      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: ${{ github.ref_name == 'main' && 'major' || 'prerelease' }}

      - run: echo ${{ steps.bump-semver.outputs.new_version }}
      # - if: github.event.inputs.upstreamCommit
      #   name: Check Upstream Commit
      #   run: |-
      #     git merge-base --is-ancestor ${{ github.event.inputs.upstreamCommit }} HEAD
      #     echo ::set-output name=commit::$(git rev-parse ${{ github.event.inputs.upstreamCommit }})

      # git tag -a "$TAG" -m "${{ github.event.inputs.title }}"
      # git push --tags

      # - run: echo "Title" >> somefile.txt
      # with:
      #   allowUpdates: true
      #   commit: ${{ steps.ancestor.outputs.commit || github.sha }}
      #   name: ${{ github.event.inputs.title }}
      #   prerelease: ${{ github.ref_name != 'main' }}
      #   tag: ${{ steps.tag.outputs.tag }}
      #   artifacts: "somefile.txt"

      #   body: |-
      #     Some body text
